{"version":3,"file":"component---src-pages-index-ts-31acedb9138eeb52c081.js","mappings":"0MAKaA,EAA0B,CACnC,CAACC,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,KACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MAEvB,CAACD,OAAD,KAAcC,SAAS,MAEvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,MACvB,CAACD,OAAD,KAAcC,SAAS,OCjBrBC,EAAkB,SAACC,GACvB,IAAIC,EACJ,EAAG,CACH,IAAMC,EAASN,EAAYM,OACrBC,EAAcC,KAAAA,MAAWA,KAAAA,SAA/B,GACAH,EAAaL,EAAbK,SACQA,EAAAA,QAJR,GAKA,OAAOA,GAUHI,EAA0B,WAE9B,OAA4BC,EAAAA,EAAAA,UAASP,EAArC,KAAOF,EAAP,KAAeU,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAlC,GAAOE,EAAP,KAAkBC,EAAlB,KAEA,OACE,uBAAKC,UAAU,aACb,uBAAKA,UAAU,8BACb,uBAAKA,UAAU,0BACZb,EAFL,QAKGW,EACC,yBAAOG,UAAP,EAAuBD,UAAvB,mBAAoDE,QAAS,WAAOH,GAAAA,KAClE,0BAAQI,IAAK,SAAWhB,EAAX,SAAb,OAAkDiB,KAAK,gBAP7D,GAWE,uBAAKJ,UAAU,iBACb,uBACEA,UAAW,sBAAwBF,EAAS,GAD9C,gBAEEO,QAAS,WAAON,GAAAA,KAEbD,EALP,aAKM,cAEJ,uBACEE,UAAW,uBAAyBF,EAAS,kBAD/C,gBAEEO,QAAS,YAAQP,GAAiBD,EAAUR,EAAgBF,EAA5C,WAtB1B,mBAiCFQ,EAAAA,aAxCA,GAyCA,IC5EA,EDO0B,WACxB,OACE,uBAAKK,UAAU,8DACb,qBACEM,MADF,0BAEEC,YAFF,kFAGEC,IAHF,KAKA,kBAPJ","sources":["webpack://gatsby-starter-default/./src/components/LetterDictionary.tsx","webpack://gatsby-starter-default/./src/views/index.tsx","webpack://gatsby-starter-default/./src/pages/index.ts"],"sourcesContent":["export interface dictEntry {\r\n    letter: string,\r\n    filename: string,\r\n}\r\n\r\nexport const dictNoSound:dictEntry[] = [\r\n    {letter:'Аа', filename:'0'},\r\n    {letter:'Бб', filename:'1'},\r\n    {letter:'Вв', filename:'2'},\r\n    {letter:'Гг', filename:'3'},\r\n    {letter:'Дд', filename:'4'},\r\n    {letter:'Ее', filename:'5'},\r\n    {letter:'Ёё', filename:'6'},\r\n    {letter:'Жж', filename:'7'},\r\n    {letter:'Зз', filename:'8'},\r\n    {letter:'Ии', filename:'9'},\r\n    {letter:'Йй', filename:'10'},\r\n    {letter:'Кк', filename:'11'},\r\n    {letter:'Лл', filename:'12'},\r\n    {letter:'Мм', filename:'13'},\r\n    {letter:'Нн', filename:'14'},\r\n    {letter:'Оо', filename:'15'},\r\n    {letter:'Пп', filename:'16'},\r\n    {letter:'Рр', filename:'17'},\r\n    {letter:'Сс', filename:'18'},\r\n    {letter:'Тт', filename:'19'},\r\n    {letter:'Уу', filename:'20'},\r\n    {letter:'Фф', filename:'21'},\r\n    {letter:'Хх', filename:'22'},\r\n    {letter:'Цц', filename:'23'},\r\n    {letter:'Чч', filename:'24'},\r\n    {letter:'Шш', filename:'25'},\r\n    {letter:'Щщ', filename:'26'},\r\n    //{letter:'Ъъ', filename:''}, // NO SOUND SOFT MODIFIER\r\n    {letter:'Ыы', filename:'28'},\r\n    //{letter:'Ьь', filename:''}, // NO SOUND HARD MODIFIER\r\n    {letter:'Ээ', filename:'30'},\r\n    {letter:'Юю', filename:'31'},\r\n    {letter:'Яя', filename:'32'},\r\n  ];\r\n\r\n","import React, { useState } from \"react\";\r\nimport Head from \"../components/Head\";\r\n\r\nimport { dictEntry, dictNoSound } from \"../components/LetterDictionary\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\n\r\n\r\n// This is a high-level view of what the page will be\r\nexport const SamplePage = () => {\r\n  return (\r\n    <div className=\"h-full w-full bg-lightBlue column centered overflow-hidden\">\r\n      <Head\r\n        title=\"Russian Letter Practice\" // Title of page for metadata, displayed on tab menu\r\n        description=\"Presents a random Russian letter, and plays its associated sound when prompted.\" // Description of page for metadata\r\n        url=\"\" // This is the final url of the page, used for embed/meta data\r\n      />\r\n      <Sample />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getRandomLetter = (currentLetter:string) => {\r\n  var nextLetter;\r\n  do {\r\n  const length = dictNoSound.length;\r\n  const randomIndex = Math.floor(Math.random() * length);\r\n  nextLetter = dictNoSound[randomIndex];\r\n  } while(nextLetter.letter == currentLetter);\r\n  return nextLetter;\r\n}\r\n\r\n\r\n// This is the Body of the page, does not include header, nav, or footer\r\n// Custom props are defined in this interface\r\ninterface props {}\r\n// Default values are defined in this interface\r\nconst defaultProps: Partial<props> = {};\r\n\r\nconst Sample: React.FC<props> = () => {\r\n\r\n  const [letter, setLetter] = useState(getRandomLetter(''));\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n\r\n  return (\r\n    <div className=\"midground\">\r\n      <div className=\"foreground column centered\">\r\n        <div className=\"letterDisplay centered\">\r\n          {letter.letter}\r\n        </div>\r\n\r\n        {playAudio // Plays audio if playAudio is set to true, sets it to false once finished playing\r\n        ? <audio autoPlay={true} className=\"h-12 text-8 my-4\" onEnded={() => {setPlayAudio(false);}}>\r\n            <source src={\"audio/\" + letter.filename + \".mp3\"} type=\"audio/mpeg\"/>\r\n          </audio>\r\n        : ''}\r\n        \r\n        <div className=\"buttonWrapper\">\r\n          <div \r\n            className={'button leftButton ' + (playAudio ? `` : `activeButton`)} \r\n            onClick={() => {setPlayAudio(true);}}\r\n          >\r\n            { !playAudio ? \"Play Sound\" : \"Playing...\" }\r\n          </div>\r\n          <div \r\n            className={\"button rightButton \" + (playAudio ? ' inactiveButton' : 'activeButton')} \r\n            onClick={() => {(playAudio ? '' : setLetter(getRandomLetter(letter.letter)))}}\r\n          >\r\n            Next Letter\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nSample.defaultProps = defaultProps;\r\nexport default SamplePage;\r\n","import SamplePage from \"../views/index\";\r\nexport default SamplePage;\r\n"],"names":["dictNoSound","letter","filename","getRandomLetter","currentLetter","nextLetter","length","randomIndex","Math","Sample","useState","setLetter","playAudio","setPlayAudio","className","autoPlay","onEnded","src","type","onClick","title","description","url"],"sourceRoot":""}