{"version":3,"file":"component---src-pages-index-ts-56c88500e89409ca6b0c.js","mappings":"qKAKA,IAGaA,EAAyB,CAClC,CAACC,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,eACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBAEvB,CAACF,OAAD,KAAcC,SAASC,gBAEvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,kB,oGCrBrBC,EAAkB,SAACC,GACvB,IAAIC,EACJ,EAAG,CACD,IAAMC,EAASP,EAAAA,EAAAA,OACTQ,EAAcC,KAAAA,MAAWA,KAAAA,SAA/B,GACAH,EAAaN,EAAAA,EAAbM,SACMA,EAAAA,QAJR,GAKA,OAAOA,GAUHI,EAA0B,WAE9B,OAA4BC,EAAAA,EAAAA,UAASP,EAArC,KAAOH,EAAP,KAAeW,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAlC,GAAOE,EAAP,KAAkBC,EAAlB,KAEA,OACE,uBAAKC,UAAU,aACb,uBAAKA,UAAU,8BACb,qBACEA,UADF,6EAEEC,KAAK,aAHT,mBAOE,uBAAKD,UAAU,iCACZd,EARL,QAWGY,EACC,yBAAOI,UAAP,EAAuBF,UAAvB,mBAAoDG,QAAS,WAAOJ,GAAAA,KAClE,0BAAQK,IAAKlB,EAAb,SAA8BmB,KAAK,gBAbzC,GAiBE,uBAAKL,UAAU,iBACb,uBACEA,UAAW,sBAAwBF,EAAS,GAD9C,gBAEEQ,QAAS,WAAOP,GAAAA,KAEbD,EALP,aAKM,cAEJ,uBACEE,UAAW,uBAAyBF,EAAS,kBAD/C,gBAEEQ,QAAS,YAAQR,GAAiBD,EAAUR,EAAgBH,EAA5C,WA5B1B,mBAuCFS,EAAAA,aA9CA,GA+CA,ICjFA,EDM0B,WACxB,OACE,uBAAKK,UAAU,8DACb,qBACEO,MADF,0BAEEC,YAFF,kFAGEC,IAHF,KAKA,kBAPJ","sources":["webpack://gatsby-starter-default/./src/components/LetterDictionary.tsx","webpack://gatsby-starter-default/./src/views/index.tsx","webpack://gatsby-starter-default/./src/pages/index.ts"],"sourcesContent":["export interface dictEntry {\r\n    letter: string,\r\n    filename: string,\r\n}\r\n\r\nconst prepend = \"audio/\";\r\nconst append = \".mp3\";\r\n\r\nexport const letterDict:dictEntry[] = [\r\n    {letter:'Аа', filename:prepend+'0'+append},\r\n    {letter:'Бб', filename:prepend+'1'+append},\r\n    {letter:'Вв', filename:prepend+'2'+append},\r\n    {letter:'Гг', filename:prepend+'3'+append},\r\n    {letter:'Дд', filename:prepend+'4'+append},\r\n    {letter:'Ее', filename:prepend+'5'+append},\r\n    {letter:'Ёё', filename:prepend+'6'+append},\r\n    {letter:'Жж', filename:prepend+'7'+append},\r\n    {letter:'Зз', filename:prepend+'8'+append},\r\n    {letter:'Ии', filename:prepend+'9'+append},\r\n    {letter:'Йй', filename:prepend+'10'+append},\r\n    {letter:'Кк', filename:prepend+'11'+append},\r\n    {letter:'Лл', filename:prepend+'12'+append},\r\n    {letter:'Мм', filename:prepend+'13'+append},\r\n    {letter:'Нн', filename:prepend+'14'+append},\r\n    {letter:'Оо', filename:prepend+'15'+append},\r\n    {letter:'Пп', filename:prepend+'16'+append},\r\n    {letter:'Рр', filename:prepend+'17'+append},\r\n    {letter:'Сс', filename:prepend+'18'+append},\r\n    {letter:'Тт', filename:prepend+'19'+append},\r\n    {letter:'Уу', filename:prepend+'20'+append},\r\n    {letter:'Фф', filename:prepend+'21'+append},\r\n    {letter:'Хх', filename:prepend+'22'+append},\r\n    {letter:'Цц', filename:prepend+'23'+append},\r\n    {letter:'Чч', filename:prepend+'24'+append},\r\n    {letter:'Шш', filename:prepend+'25'+append},\r\n    {letter:'Щщ', filename:prepend+'26'+append},\r\n    //{letter:'Ъъ', filename:prepend+''+append}, // NO SOUND SOFT MODIFIER\r\n    {letter:'Ыы', filename:prepend+'28'+append},\r\n    //{letter:'Ьь', filename:prepend+''+append}, // NO SOUND HARD MODIFIER\r\n    {letter:'Ээ', filename:prepend+'30'+append},\r\n    {letter:'Юю', filename:prepend+'31'+append},\r\n    {letter:'Яя', filename:prepend+'32'+append},\r\n  ];\r\n\r\n","import React, { useState } from \"react\";\r\nimport Head from \"../components/Head\";\r\n\r\nimport { dictEntry, letterDict } from \"../components/LetterDictionary\";\r\n\r\n\r\n// This is a high-level view of what the page will be\r\nexport const SamplePage = () => {\r\n  return (\r\n    <div className=\"h-full w-full bg-lightBlue column centered overflow-hidden\">\r\n      <Head\r\n        title=\"Russian Letter Practice\" // Title of page for metadata, displayed on tab menu\r\n        description=\"Presents a random Russian letter, and plays its associated sound when prompted.\" // Description of page for metadata\r\n        url=\"\" // This is the final url of the page, used for embed/meta data\r\n      />\r\n      <Sample />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getRandomLetter = (currentLetter:string) => {\r\n  var nextLetter;\r\n  do {\r\n    const length = letterDict.length;\r\n    const randomIndex = Math.floor(Math.random() * length);\r\n    nextLetter = letterDict[randomIndex];\r\n  } while(nextLetter.letter == currentLetter);\r\n  return nextLetter;\r\n}\r\n\r\n\r\n// This is the Body of the page, does not include header, nav, or footer\r\n// Custom props are defined in this interface\r\ninterface props {}\r\n// Default values are defined in this interface\r\nconst defaultProps: Partial<props> = {};\r\n\r\nconst Sample: React.FC<props> = () => {\r\n\r\n  const [letter, setLetter] = useState(getRandomLetter(''));\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n\r\n  return (\r\n    <div className=\"midground\">\r\n      <div className=\"foreground column centered\">\r\n        <a \r\n          className=\"fixed bottom-0 text-pink-600 mb-2 p-2 underline cursor-pointer select-none\"\r\n          href=\"/view-all\"\r\n        >\r\n          View Dictionary\r\n        </a>\r\n        <div className=\"letterDisplay column centered\">\r\n          {letter.letter}\r\n        </div>\r\n\r\n        {playAudio // Plays audio if playAudio is set to true, sets it to false once finished playing\r\n        ? <audio autoPlay={true} className=\"h-12 text-8 my-4\" onEnded={() => {setPlayAudio(false);}}>\r\n            <source src={letter.filename} type=\"audio/mpeg\"/>\r\n          </audio>\r\n        : ''}\r\n        \r\n        <div className=\"buttonWrapper\">\r\n          <div \r\n            className={'button leftButton ' + (playAudio ? `` : `activeButton`)} \r\n            onClick={() => {setPlayAudio(true);}}\r\n          >\r\n            { !playAudio ? \"Play Sound\" : \"Playing...\" }\r\n          </div>\r\n          <div \r\n            className={\"button rightButton \" + (playAudio ? ' inactiveButton' : 'activeButton')} \r\n            onClick={() => {(playAudio ? '' : setLetter(getRandomLetter(letter.letter)))}}\r\n          >\r\n            Next Letter\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nSample.defaultProps = defaultProps;\r\nexport default SamplePage;\r\n","import SamplePage from \"../views/index\";\r\nexport default SamplePage;\r\n"],"names":["letterDict","letter","filename","prepend","getRandomLetter","currentLetter","nextLetter","length","randomIndex","Math","Sample","useState","setLetter","playAudio","setPlayAudio","className","href","autoPlay","onEnded","src","type","onClick","title","description","url"],"sourceRoot":""}