{"version":3,"file":"component---src-pages-view-all-ts-d555057368d25e56a4e9.js","mappings":"qKAKA,IAGaA,EAAyB,CAClC,CAACC,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,gBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBAEvB,CAACF,OAAD,KAAcC,SAASC,iBAEvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,iBACvB,CAACF,OAAD,KAAcC,SAASC,mB,8GCdrBC,EAA0B,WAE9B,OAA4BC,EAAAA,EAAAA,UAAoBL,EAAAA,EAAAA,IAAzCC,EAAP,KAAeK,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAlC,GAAOE,EAAP,KAAkBC,EAAlB,KAEA,OACE,uBAAKC,UAAU,aACb,uBAAKA,UAAU,8BAEb,wBACIA,UADJ,wEAEIC,GAAG,KAJT,aASE,uBAAKD,UAAU,wCACbR,aADF,EACEA,EADF,OAECM,EACC,yBAAOI,UAAP,EAAuBF,UAAvB,mBAAoDG,QAAS,WAAOJ,GAAAA,KAClE,0BAAQK,KAAKC,EAAAA,EAAAA,YAAWb,EAAxB,UAA0Cc,KAAK,gBAbrD,IAkBE,uBAAKN,UAAU,qBAEX,SAAe,YACX,OACI,uBACIA,UAAW,gBAAkBF,EAAS,iBAD1C,gBAEIS,IAAKC,EAFT,OAGIC,QAAS,WAAQ,IAAgBZ,EAAAA,GAAcE,GAAAA,MAE9CS,EANT,eAkBhBb,EAAAA,aAhDA,GAiDA,ICzEA,EDOuB,WACrB,OACE,uBAAKK,UAAU,8DACb,qBACEU,MADF,mBAEEC,YAFF,sCAGEC,IAHF,KAKA,kBAPJ","sources":["webpack://gatsby-starter-default/./src/components/LetterDictionary.tsx","webpack://gatsby-starter-default/./src/views/view-all.tsx","webpack://gatsby-starter-default/./src/pages/view-all.ts"],"sourcesContent":["export interface dictEntry {\r\n    letter: string,\r\n    filename: string,\r\n}\r\n\r\nconst prepend = \"/audio/\";\r\nconst append = \".mp3\";\r\n\r\nexport const letterDict:dictEntry[] = [\r\n    {letter:'Аа', filename:prepend+'0'+append},\r\n    {letter:'Бб', filename:prepend+'1'+append},\r\n    {letter:'Вв', filename:prepend+'2'+append},\r\n    {letter:'Гг', filename:prepend+'3'+append},\r\n    {letter:'Дд', filename:prepend+'4'+append},\r\n    {letter:'Ее', filename:prepend+'5'+append},\r\n    {letter:'Ёё', filename:prepend+'6'+append},\r\n    {letter:'Жж', filename:prepend+'7'+append},\r\n    {letter:'Зз', filename:prepend+'8'+append},\r\n    {letter:'Ии', filename:prepend+'9'+append},\r\n    {letter:'Йй', filename:prepend+'10'+append},\r\n    {letter:'Кк', filename:prepend+'11'+append},\r\n    {letter:'Лл', filename:prepend+'12'+append},\r\n    {letter:'Мм', filename:prepend+'13'+append},\r\n    {letter:'Нн', filename:prepend+'14'+append},\r\n    {letter:'Оо', filename:prepend+'15'+append},\r\n    {letter:'Пп', filename:prepend+'16'+append},\r\n    {letter:'Рр', filename:prepend+'17'+append},\r\n    {letter:'Сс', filename:prepend+'18'+append},\r\n    {letter:'Тт', filename:prepend+'19'+append},\r\n    {letter:'Уу', filename:prepend+'20'+append},\r\n    {letter:'Фф', filename:prepend+'21'+append},\r\n    {letter:'Хх', filename:prepend+'22'+append},\r\n    {letter:'Цц', filename:prepend+'23'+append},\r\n    {letter:'Чч', filename:prepend+'24'+append},\r\n    {letter:'Шш', filename:prepend+'25'+append},\r\n    {letter:'Щщ', filename:prepend+'26'+append},\r\n    //{letter:'Ъъ', filename:prepend+''+append}, // NO SOUND SOFT MODIFIER\r\n    {letter:'Ыы', filename:prepend+'28'+append},\r\n    //{letter:'Ьь', filename:prepend+''+append}, // NO SOUND HARD MODIFIER\r\n    {letter:'Ээ', filename:prepend+'30'+append},\r\n    {letter:'Юю', filename:prepend+'31'+append},\r\n    {letter:'Яя', filename:prepend+'32'+append},\r\n  ];\r\n\r\n","import { Link, withPrefix } from \"gatsby\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Head from \"../components/Head\";\r\n\r\nimport { dictEntry, letterDict } from \"../components/LetterDictionary\";\r\n\r\n\r\n// This is a high-level view of what the page will be\r\nexport const ViewAll = () => {\r\n  return (\r\n    <div className=\"h-full w-full bg-lightBlue column centered overflow-hidden\">\r\n      <Head\r\n        title=\"Russian Alphabet\" // Title of page for metadata, displayed on tab menu\r\n        description=\"Select a letter to play it's sound!\" // Description of page for metadata\r\n        url=\"\" // This is the final url of the page, used for embed/meta data\r\n      />\r\n      <Sample/>\r\n    </div>\r\n  );\r\n};\r\n\r\n// This is the Body of the page, does not include header, nav, or footer\r\n// Custom props are defined in this interface\r\ninterface props {}\r\n// Default values are defined in this interface\r\nconst defaultProps: Partial<props> = {};\r\n\r\nconst Sample: React.FC<props> = () => {\r\n\r\n  const [letter, setLetter] = useState<dictEntry>(letterDict[0]);\r\n  const [playAudio, setPlayAudio] = useState(false);\r\n\r\n  return (\r\n    <div className=\"midground\">\r\n      <div className=\"foreground column centered\">\r\n        {/*@ts-ignore*/}\r\n        <Link \r\n            className=\"fixed bottom-0 text-pink-600 p-2 underline cursor-pointer select-none\"\r\n            to=\"/\"\r\n        >\r\n            {\"< Go Back\"}\r\n        </Link>\r\n\r\n        <div className=\"letterDisplayViewAll centered column\">\r\n        { letter?.letter }\r\n        {playAudio // Plays audio if playAudio is set to true, sets it to false once finished playing\r\n        ? <audio autoPlay={true} className=\"h-12 text-8 my-4\" onEnded={() => {setPlayAudio(false);}}>\r\n            <source src={withPrefix(letter.filename)} type=\"audio/mpeg\"/>\r\n          </audio>\r\n        : ''}\r\n        </div>\r\n        \r\n        <div className=\"dictionaryDisplay\">\r\n          {\r\n            letterDict.map((l) => {\r\n                return (\r\n                    <div \r\n                        className={\"letterInRow \" + (playAudio ? \"inactiveButton\" : \"activeButton\") }\r\n                        key={l.letter}\r\n                        onClick={() => { if(!playAudio) {setLetter(l); setPlayAudio(true);} }}\r\n                    > \r\n                        {l.letter} \r\n                    </div>\r\n                );\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nSample.defaultProps = defaultProps;\r\nexport default ViewAll;\r\n","import ViewAll from \"../views/view-all\";\r\nexport default ViewAll;\r\n"],"names":["letterDict","letter","filename","prepend","Sample","useState","setLetter","playAudio","setPlayAudio","className","to","autoPlay","onEnded","src","withPrefix","type","key","l","onClick","title","description","url"],"sourceRoot":""}